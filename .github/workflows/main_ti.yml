name: Build & Deploy STIP

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  APP_NAME: TI  

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: List csproj (debug)
        run: |
          pwd
          find . -maxdepth 5 -type f -name "*.csproj" -print

      - name: Detect web project
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          WEB_CSPROJ=$(grep -Rl '<Project Sdk="Microsoft.NET.Sdk.Web"' --include '*.csproj' . | head -n1 || true)
          if [ -z "$WEB_CSPROJ" ]; then
            WEB_CSPROJ=$(find . -type f -name '*.csproj' ! -iname '*Tests*.csproj' | head -n1 || true)
          fi
          if [ -z "$WEB_CSPROJ" ]; then
            echo "No web project found."
            exit 1
          fi
          echo "Web project: $WEB_CSPROJ"
          echo "web_csproj=$WEB_CSPROJ" >> "$GITHUB_OUTPUT"

      - name: Restore (solution)
        run: dotnet restore ./Simplified-Threat-Intelligence-Platform.sln

      - name: Build (solution)
        run: dotnet build ./Simplified-Threat-Intelligence-Platform.sln -c Release --no-restore

      - name: Test (all test projects)
        run: dotnet test ./Simplified-Threat-Intelligence-Platform.sln -c Release --no-build --logger "trx;LogFileName=testResults.trx"

      - name: Publish (web project)
        run: dotnet publish "${{ steps.detect.outputs.web_csproj }}" -c Release -o ${{ github.workspace }}/publish --no-build

      - name: Show publish content (debug)
        run: |
          ls -la ${{ github.workspace }}/publish
          test -f "${{ github.workspace }}/publish/Simplified-Threat-Intelligence-Platform.dll" && echo "dll OK"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: ${{ github.workspace }}/publish

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp
          path: ./publish

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_24123497BD77450E9F7B8F65704C6E4A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_9CCCBB3BD51A41559C3AB4D68CCD4DFE }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_2EF8250BEA3E4396B04EAAF51B37E677 }}

      - name: Ensure startup command & settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            APP_NAME="${APP_NAME}"
            # Află automat resource group-ul Web App-ului
            RG=$(az webapp list --query "[?name=='${APP_NAME}'].resourceGroup | [0]" -o tsv)
            if [ -z "${RG}" ]; then
              echo "Nu am găsit Web App '${APP_NAME}' in subscription."
              exit 1
            fi
            echo "Resource group: ${RG}"

         
            az webapp config set \
              --resource-group "${RG}" \
              --name "${APP_NAME}" \
              --startup-file "dotnet /home/site/wwwroot/Simplified-Threat-Intelligence-Platform.dll"

          
            az webapp config appsettings set \
              --resource-group "${RG}" \
              --name "${APP_NAME}" \
              --settings ASPNETCORE_URLS="http://0.0.0.0:8080"

            echo "Startup command și app settings setate."

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: 'Production'
          package: ./publish
