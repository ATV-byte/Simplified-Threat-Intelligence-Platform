using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Moq;
using Simplified_Threat_Intelligence_Platform.Controllers;
using Simplified_Threat_Intelligence_Platform.Dtos;
using Simplified_Threat_Intelligence_Platform.Services;
using Simplified_Threat_Intelligence_Platform.Shared;
using Xunit;

namespace Simplified_Threat_Intelligence_Platform.Tests.Controllers
{
    public class MalwareControllerTests
    {
        [Fact]
        public async Task Recent_NoItems_ReturnsNoContent()
        {
            var svc = new Mock<IMalwareService>();
            svc.Setup(s => s.GetRecentAsync()).ReturnsAsync(new List<MalwareViewDto>());

            var controller = new MalwareController(svc.Object);

            var result = await controller.Recent();

            Assert.IsType<NoContentResult>(result);
        }

        [Fact]
        public async Task Create_ReturnsCreatedResult()
        {
            var svc = new Mock<IMalwareService>();
            svc.Setup(s => s.CreateAsync(It.IsAny<MalwareCreateDto>())).ReturnsAsync("123");

            var controller = new MalwareController(svc.Object);

            var result = await controller.Create(new MalwareCreateDto());

            var created = Assert.IsType<CreatedResult>(result);
            Assert.Equal("/api/malware/123", created.Location);
        }

        [Fact]
        public async Task Search_ReturnsOkWithResults()
        {
            var list = new List<MalwareViewDto> { new MalwareViewDto { Id = "1" } };
            var svc = new Mock<IMalwareService>();
            svc.Setup(s => s.SearchByValuesAsync(It.IsAny<List<string>>())).ReturnsAsync(list);

            var controller = new MalwareController(svc.Object);

            var result = await controller.Search(new SearchRequestDto { Values = new List<string> { "a" } });

            var ok = Assert.IsType<OkObjectResult>(result);
            Assert.Equal(list, ok.Value);
        }

        [Fact]
        public async Task Update_Conflict_ReturnsConflict()
        {
            var svc = new Mock<IMalwareService>();
            svc.Setup(s => s.UpdateAsync("1", It.IsAny<MalwareUpdateDto>()))
               .ThrowsAsync(new ConflictException("dup"));

            var controller = new MalwareController(svc.Object);

            var result = await controller.Update("1", new MalwareUpdateDto());

            Assert.IsType<ConflictObjectResult>(result);
        }
    }
}