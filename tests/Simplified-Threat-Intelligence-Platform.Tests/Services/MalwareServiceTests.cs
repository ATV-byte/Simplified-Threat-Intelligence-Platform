using System.Collections.Generic;
using System.Threading.Tasks;
using MongoDB.Bson;
using Moq;
using Simplified_Threat_Intelligence_Platform.Dtos;
using Simplified_Threat_Intelligence_Platform.Repositories;
using Simplified_Threat_Intelligence_Platform.Services;
using Simplified_Threat_Intelligence_Platform.Shared;
using Xunit;

namespace Simplified_Threat_Intelligence_Platform.Tests.Services
{
    public class MalwareServiceTests
    {
        [Fact]
        public async Task CreateAsync_ShouldInsertAndReturnId()
        {
            var malwareRepo = new Mock<IMalwareRepository>();
            var indicatorRepo = new Mock<IIndicatorRepository>();

            malwareRepo.Setup(m => m.FindByNameAsync(It.IsAny<string>()))
                       .ReturnsAsync(new List<BsonDocument>());
            malwareRepo.Setup(m => m.FindByCreatedDateWindowAsync(It.IsAny<long>(), It.IsAny<int>()))
                       .ReturnsAsync(new List<BsonDocument>());
            indicatorRepo.Setup(i => i.EnsureIndicatorsAsync(It.IsAny<IEnumerable<IndicatorInputDto>>()))
                         .ReturnsAsync(new List<string> { "ind1" });
            malwareRepo.Setup(m => m.InsertAsync(It.IsAny<BsonDocument>()))
                       .ReturnsAsync("newid");

            var svc = new MalwareService(malwareRepo.Object, indicatorRepo.Object);

            var dto = new MalwareCreateDto
            {
                Name = "name",
                Labels = new List<string> { "l" },
                Indicators = new List<IndicatorInputDto> { new IndicatorInputDto { Value = "1.1.1.1" } },
                CreatedDate = 10,
                UpdatedDate = 20
            };

            var id = await svc.CreateAsync(dto);

            Assert.Equal("newid", id);
            malwareRepo.Verify(m => m.InsertAsync(It.IsAny<BsonDocument>()), Times.Once);
        }

        [Fact]
        public async Task CreateAsync_DuplicateByName_ThrowsConflict()
        {
            var malwareRepo = new Mock<IMalwareRepository>();
            var indicatorRepo = new Mock<IIndicatorRepository>();
            var dup = new BsonDocument { { "_id", ObjectId.GenerateNewId() }, { "name", "same" } };

            malwareRepo.Setup(m => m.FindByNameAsync("same"))
                       .ReturnsAsync(new List<BsonDocument> { dup });

            var svc = new MalwareService(malwareRepo.Object, indicatorRepo.Object);

            var dto = new MalwareCreateDto { Name = "same", Indicators = new() };

            await Assert.ThrowsAsync<ConflictException>(() => svc.CreateAsync(dto));
        }

        [Fact]
        public async Task GetRecentAsync_MapsDocumentsToDtos()
        {
            var docs = new List<BsonDocument>
            {
                new BsonDocument
                {
                    { "_id", ObjectId.GenerateNewId() },
                    { "name", "mal" },
                    { "labels", new BsonArray { "a" } },
                    { "updatedDate", 5L }
                }
            };

            var malwareRepo = new Mock<IMalwareRepository>();
            malwareRepo.Setup(m => m.GetRecentAsync(It.IsAny<long>()))
                       .ReturnsAsync(docs);

            var svc = new MalwareService(malwareRepo.Object, Mock.Of<IIndicatorRepository>());

            var result = await svc.GetRecentAsync();

            Assert.Single(result);
            Assert.Equal(docs[0]["_id"].ToString(), result[0].Id);
            Assert.Equal("mal", result[0].Name);
        }
    }
}