using MongoDB.Bson;
using MongoDB.Driver;

namespace Simplified_Threat_Intelligence_Platform.Repositories
{
    public class MalwareRepository : IMalwareRepository
    {
        private readonly IMongoCollection<BsonDocument> _col;
        public MalwareRepository(IMongoDatabase db) => _col = db.GetCollection<BsonDocument>("malware");

        public async Task<string> InsertAsync(BsonDocument doc)
        {
            await _col.InsertOneAsync(doc);
            return doc["_id"].ToString();
        }

        public Task ReplaceAsync(string id, BsonDocument doc)
            => _col.ReplaceOneAsync(Builders<BsonDocument>.Filter.Eq("_id", ObjectId.Parse(id)), doc);

        public Task<List<BsonDocument>> GetRecentAsync(long sinceEpoch)
        {
            var f = Builders<BsonDocument>.Filter.Or(
                Builders<BsonDocument>.Filter.Gte("createdDate", sinceEpoch),
                Builders<BsonDocument>.Filter.Gte("updatedDate", sinceEpoch)
            );
            return _col.Find(f).ToListAsync();
        }

        public Task<List<BsonDocument>> GetByIndicatorIdsAsync(IEnumerable<string> indicatorIds)
        {
            var f = Builders<BsonDocument>.Filter.AnyIn("indicatorIds", indicatorIds);
            return _col.Find(f).ToListAsync();
        }


        public Task<List<BsonDocument>> FindByNameAsync(string name)
        {
            var f = Builders<BsonDocument>.Filter.Eq("name", name);
            return _col.Find(f).ToListAsync();
        }
        public Task<List<BsonDocument>> FindByCreatedDateWindowAsync(long centerEpoch, int deltaSeconds)
        {
            var f = Builders<BsonDocument>.Filter.And(
                Builders<BsonDocument>.Filter.Gte("createdDate", centerEpoch - deltaSeconds),
                Builders<BsonDocument>.Filter.Lte("createdDate", centerEpoch + deltaSeconds)
            );

            return _col.Find(f).ToListAsync();
        }


    }
}
