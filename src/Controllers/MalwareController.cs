using Microsoft.AspNetCore.Mvc;
using Simplified_Threat_Intelligence_Platform.Dtos;
using Simplified_Threat_Intelligence_Platform.Services;
using Simplified_Threat_Intelligence_Platform.Shared;

namespace Simplified_Threat_Intelligence_Platform.Controllers;

[ApiController]
[Route("api/[controller]")]
public class MalwareController(IMalwareService svc) : ControllerBase
{
    private readonly IMalwareService _svc = svc;

    [HttpPost]
    public async Task<IActionResult> Create([FromBody] MalwareCreateDto dto)
    {
        try
        {
            var id = await _svc.CreateAsync(dto);
            return Created($"/api/malware/{id}", new { id });
        }
        catch (ConflictException ex) { return Conflict(new { error = ex.Message }); }
    }

    [HttpGet("recent")]
    public async Task<IActionResult> Recent()
    {
        var items = await _svc.GetRecentAsync();
        if (items is null || items.Count == 0) return NoContent();
        return Ok(items);
    }

    [HttpPost("search")]
    public async Task<IActionResult> Search([FromBody] SearchRequestDto req)
    {
        var results = await _svc.SearchByValuesAsync(req.Values);
        if (results is null || results.Count == 0) return NoContent();
        return Ok(results);
    }

    [HttpPut("{id}")]
    public async Task<IActionResult> Update([FromRoute] string id, [FromBody] MalwareUpdateDto dto)
    {
        try
        {
            await _svc.UpdateAsync(id, dto);
            return Ok();
        }
        catch (ConflictException ex) { return Conflict(new { error = ex.Message }); }
    }
}
